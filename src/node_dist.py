import matplotlib.pyplot as plt
from collections import Counter

'''
Exemple avec :

N = 1000
K = 16

'''


# Exemple de données : tu peux remplacer ça par ta propre liste
degrees = [16, 15, 16, 15, 16, 15, 15, 15, 18, 16, 17, 15, 16, 15, 17, 16, 17, 18, 15, 18, 17, 14, 14, 15, 16, 15, 16, 15, 16, 16, 12, 15, 15, 13, 14, 15, 16, 16, 18, 16, 15, 17, 16, 16, 17, 15, 15, 16, 13, 17, 17, 14, 17, 17, 13, 15, 15, 17, 16, 16, 17, 14, 15, 16, 16, 16, 16, 18, 19, 16, 14, 16, 19, 17, 18, 15, 16, 17, 16, 17, 16, 17, 16, 13, 17, 17, 15, 18, 16, 15, 15, 13, 14, 16, 15, 14, 16, 16, 15, 15, 16, 17, 15, 17, 15, 15, 14, 14, 14, 17, 16, 15, 15, 19, 16, 15, 16, 16, 16, 16, 16, 16, 17, 14, 16, 15, 16, 14, 18, 15, 17, 18, 15, 17, 16, 15, 15, 16, 17, 17, 15, 19, 14, 15, 16, 16, 17, 16, 18, 16, 16, 15, 14, 17, 15, 15, 14, 16, 15, 16, 15, 16, 18, 17, 16, 18, 16, 14, 16, 18, 17, 17, 18, 16, 16, 16, 16, 15, 17, 15, 15, 15, 17, 15, 15, 15, 16, 16, 17, 16, 15, 16, 18, 15, 14, 16, 14, 16, 16, 16, 14, 17, 16, 15, 18, 17, 15, 15, 16, 16, 15, 15, 19, 17, 17, 16, 16, 17, 13, 16, 16, 15, 16, 17, 17, 17, 16, 16, 15, 18, 15, 15, 16, 18, 15, 16, 18, 17, 13, 16, 16, 16, 16, 16, 17, 16, 15, 18, 16, 17, 16, 17, 17, 15, 17, 16, 14, 16, 16, 16, 17, 17, 15, 15, 16, 18, 15, 19, 16, 16, 16, 16, 17, 14, 16, 16, 15, 17, 16, 16, 14, 16, 15, 16, 15, 15, 15, 17, 16, 14, 16, 17, 16, 17, 15, 12, 16, 15, 15, 17, 17, 15, 15, 18, 15, 15, 17, 16, 16, 16, 15, 16, 14, 16, 16, 17, 16, 16, 16, 15, 16, 15, 16, 14, 16, 17, 17, 17, 17, 19, 16, 16, 16, 16, 14, 17, 16, 18, 14, 18, 15, 15, 16, 17, 16, 15, 16, 16, 18, 18, 14, 16, 17, 14, 17, 14, 13, 15, 15, 15, 16, 14, 17, 14, 15, 15, 16, 15, 15, 18, 16, 14, 15, 16, 16, 15, 16, 16, 16, 18, 19, 16, 16, 14, 16, 16, 15, 19, 15, 16, 15, 18, 17, 17, 17, 16, 15, 17, 16, 16, 19, 18, 16, 16, 17, 16, 16, 17, 16, 17, 14, 14, 17, 15, 16, 16, 17, 14, 17, 16, 16, 14, 17, 15, 18, 17, 13, 17, 16, 18, 16, 17, 14, 15, 16, 18, 15, 17, 18, 15, 15, 17, 14, 18, 16, 15, 16, 15, 17, 15, 15, 15, 15, 16, 17, 16, 16, 16, 16, 16, 18, 18, 18, 15, 15, 17, 14, 16, 16, 19, 16, 16, 14, 16, 15, 16, 15, 16, 12, 18, 17, 17, 16, 17, 17, 14, 17, 15, 16, 17, 16, 15, 18, 16, 16, 16, 16, 15, 17, 16, 15, 18, 15, 15, 18, 16, 16, 16, 16, 17, 16, 16, 18, 17, 17, 15, 15, 16, 14, 17, 16, 17, 17, 16, 16, 16, 18, 16, 17, 14, 16, 18, 16, 13, 17, 16, 14, 16, 15, 19, 17, 15, 16, 15, 17, 15, 16, 17, 16, 17, 18, 16, 16, 16, 15, 19, 15, 16, 18, 17, 15, 16, 14, 15, 14, 17, 16, 14, 15, 17, 15, 16, 15, 16, 16, 15, 17, 17, 18, 18, 15, 15, 16, 16, 17, 16, 15, 18, 15, 16, 17, 16, 16, 16, 16, 14, 17, 14, 20, 16, 17, 15, 17, 18, 15, 17, 17, 17, 17, 16, 16, 18, 16, 17, 15, 12, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 14, 15, 17, 16, 17, 17, 16, 17, 17, 18, 18, 15, 16, 17, 16, 17, 14, 18, 14, 17, 16, 17, 19, 16, 16, 17, 15, 16, 16, 13, 16, 15, 16, 17, 16, 15, 17, 20, 16, 15, 16, 16, 16, 19, 17, 15, 18, 16, 18, 16, 14, 16, 17, 15, 17, 16, 17, 17, 16, 15, 15, 17, 16, 16, 16, 16, 14, 13, 15, 18, 17, 17, 15, 14, 15, 15, 17, 16, 16, 17, 17, 16, 15, 16, 16, 14, 16, 18, 15, 16, 15, 15, 15, 16, 17, 16, 18, 16, 15, 16, 18, 16, 14, 17, 14, 16, 16, 17, 15, 16, 16, 16, 17, 14, 15, 14, 16, 17, 15, 17, 15, 16, 16, 17, 12, 15, 16, 16, 17, 16, 18, 17, 16, 18, 15, 17, 17, 14, 17, 18, 17, 16, 16, 15, 14, 17, 16, 16, 16, 17, 17, 15, 15, 14, 17, 16, 17, 17, 17, 16, 16, 15, 16, 16, 17, 14, 17, 14, 16, 17, 15, 16, 16, 15, 13, 15, 15, 16, 18, 17, 18, 16, 16, 14, 17, 18, 17, 17, 15, 17, 15, 16, 14, 16, 16, 15, 18, 14, 16, 15, 15, 16, 16, 16, 16, 17, 16, 17, 15, 17, 15, 14, 14, 16, 15, 17, 16, 19, 14, 16, 16, 15, 17, 15, 18, 14, 18, 17, 16, 15, 13, 15, 16, 15, 18, 16, 16, 14, 16, 16, 16, 20, 14, 16, 17, 16, 17, 16, 15, 17, 16, 15, 16, 15, 18, 17, 15, 17, 17, 16, 14, 16, 16, 20, 15, 16, 17, 15, 15, 15, 16, 16, 13, 16, 16, 16, 17, 15, 15, 16, 17, 16, 17, 21, 16, 16, 15, 17, 18, 16, 18, 16, 15, 17, 16, 17, 16, 19, 15, 14, 16, 15, 15, 15, 16, 14, 15, 19, 16, 16, 14, 17, 17, 18, 14, 17, 15, 17, 17, 17, 17, 18, 15, 18, 16, 18, 16, 16, 15, 16, 16, 15, 15, 15, 16, 16, 16, 18, 16, 15, 15, 17, 16, 15, 17, 17, 16, 20, 16, 18, 18, 15, 15, 17, 16, 16, 16, 16, 16, 17, 15, 17, 16, 15, 17, 16, 16, 15, 15, 17, 15, 18, 16]

# Compter les occurrences
counter = Counter(degrees)

# Trier les clés (facultatif mais plus propre sur le graphe)
x = sorted(counter.keys())
y = [counter[k] for k in x]

# Création du bar plot
plt.bar(x, y, color='skyblue', edgecolor='black')
plt.xlabel('Nb de voisins (degré du noeud)')
plt.ylabel('Nombre de noeuds')
plt.title('Distribution des degrés \n réseau ws avec N=1000 et K=16, p != 0')
plt.xticks(x)  # pour que chaque valeur apparaisse sur l'axe X
plt.grid(axis='y', linestyle='--', alpha=0.7)

plt.show()
